{"version":3,"file":"mongoose.js","sources":["../../src/utils/mongoose.ts"],"sourcesContent":["import { Schema, Model, Document } from 'mongoose';\n\ninterface MongooseFields {\n  readonly createdAt: Date;\n  readonly updatedAt: Date;\n  readonly deletedAt: Date;\n}\n\ninterface MongooseMethods {\n  readonly $create: Function;\n  readonly $update: Function;\n  readonly $delete: Function;\n}\n\n/**\n * Custom Document types with additional fields and methods\n */\ninterface CustomMongooseDocument extends Document, MongooseFields, MongooseMethods {}\n\n/**\n * Custom Model types with custom MongooseDocument\n */\ninterface CustomMongooseModel extends Model<CustomMongooseDocument> {}\n\n/**\n * Replace native mongoose's `timestamps` with additional `deletedAt` field\n * @param schema Mongoose Schema\n * @param _ Options\n */\nconst timestampsPlugin = (schema: Schema, _: any) => {\n  // custom fields\n  schema.add({\n    createdAt: Date,\n    updatedAt: Date,\n    deletedAt: Date,\n  });\n\n  // remove private fields on toJSON\n  schema.set('toJSON', {\n    virtuals: true,\n    versionKey: false,\n    transform: (_: any, ret: any) => ({\n      ...ret,\n      _id: undefined,\n      deletedAt: undefined,\n    }),\n  });\n\n  // attach conditions on find hooks\n  const hooks = {\n    query () {\n      (this as any).where({\n        deletedAt: { $exists: false },\n      });\n    },\n  };\n  [\n    'count',\n    'countDocuments',\n    'find',\n    'findOne',\n    'findOneAndRemove',\n    'findOneAndUpdate',\n    'update',\n    'updateOne',\n    'updateMany',\n  ].forEach(method => schema.pre(method, hooks.query));\n\n  // custom methods with fields injected on create, update & delete\n  // tslint:disable-next-line: no-object-mutation\n  Object.assign(schema.methods, {\n    $create() {\n      (this as any).set({\n        createdAt: Date.now(),\n      });\n\n      return (this as any).save();\n    },\n\n    $update(changes: {readonly [key: string]: any}) {\n      (this as any).set({\n        ...changes,\n        updatedAt: Date.now(),\n      });\n\n      return (this as any).save();\n    },\n\n    $delete() {\n      (this as any).set({\n        deletedAt: Date.now(),\n      });\n\n      return (this as any).save();\n    },\n  });\n};\n\nexport {\n  CustomMongooseDocument,\n  CustomMongooseModel,\n  timestampsPlugin,\n};\n"],"names":[],"mappings":";;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}